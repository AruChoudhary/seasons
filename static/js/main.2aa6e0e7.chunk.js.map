{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","console","log","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8MAGMA,EAAe,CACjBC,OAAS,CACLC,KAAO,uBACPC,SAAW,OAEfC,OAAS,CACLF,KAAO,sBACPC,SAAW,cA2BJE,EAbO,SAACC,GACnB,IAXeC,EAAKC,EAWdC,GAXSF,EAWUD,EAAMC,KAXXC,GAWgB,IAAIE,MAAOC,YAVtC,GAAKH,EAAM,EACTD,EAAI,EAAI,SAAW,SAEnBA,EAAI,EAAI,SAAW,UAMD,EAEJP,EAAaS,GAA/BP,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,SAEb,OADAS,QAAQC,IAAIJ,GAER,sBAAKK,UAAS,yBAAsBL,GAApC,UACI,mBAAGK,UAAS,4BAAyBX,EAAzB,WACZ,6BAAKD,IACL,mBAAGY,UAAS,6BAA0BX,EAA1B,eC9BlBY,EAAU,SAACT,GACb,OACI,qBAAKQ,UAAU,mBAAf,SACI,qBAAKA,UAAU,qBAAf,SAAqCR,EAAMU,aAKvDD,EAAQE,aAAe,CACnBD,QAAU,cAGCD,QCQTG,E,4MAwBFC,MAAQ,CAACZ,IAAK,KAAMa,aAAc,I,uDAElC,WAAoB,IAAD,OACfC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEnB,IAAKkB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAACN,aAAaS,EAAIb,e,gCAIjD,WACIJ,QAAQC,IAAI,oD,oBAKhB,WAQI,OAAGiB,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMZ,IAC/B,2CAAcuB,KAAKX,MAAMC,iBAGhCU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMZ,IAC/B,cAAC,EAAD,CAAeA,IAAKuB,KAAKX,MAAMZ,MAGnC,cAAC,EAAD,CAASS,QAAU,uC,GAvDhBe,IAAMC,WA2DxBC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.2aa6e0e7.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\nconst seasonConfig = {\r\n    summer : {\r\n        text : \"Let's hit the beach!\",\r\n        iconName : 'sun'\r\n    },\r\n    winter : {\r\n        text : 'Burr, it is chilly!',\r\n        iconName : 'snowflake'\r\n    }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n    if(month>2 && month<9){\r\n        return lat>0 ? 'summer' : 'winter';\r\n    }else{\r\n        return lat>0 ? 'winter' : 'summer';\r\n    }\r\n};\r\n\r\n\r\n//Function Component\r\nconst SeasonDisplay = (props) => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const {text, iconName} = seasonConfig[season]; //return our object with text and iconName inside of it\r\n    console.log(season);\r\n    return (\r\n        <div className = {`season-display ${season}`}>\r\n            <i className = {`icon-left massive ${iconName} icon`} />\r\n            <h1>{text}</h1>\r\n            <i className = {`icon-right massive ${iconName} icon`} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message : 'Loading...'\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\n\r\n/*\r\n//Function based component!\r\nconst App = () => {\r\n    //This function requires two function callbacks to determine the current location.\r\n    window.navigator.geolocation.getCurrentPosition(\r\n        (position) => console.log(position), //success callback\r\n        (err) => console.log(err) //faliure callback\r\n    );\r\n    return (\r\n        <div>Latitude:</div>\r\n    );\r\n};\r\n*/\r\n\r\n\r\n//  Based Component!\r\n//It allows tons of functionality from React.Component\r\nclass App extends React.Component {\r\n\r\n    //Constructor initialization\r\n    //Very first function to be called any time the instance of the class is created:\r\n    // constructor(props){\r\n    //     super(props);\r\n\r\n    //     //Initializing the state object\r\n    //     //THIS IS THE ONLY TIME WE DO DIRECT ASSIGNMENT TO this.state I.E., FIRST TIME WHILE INITIALIZING!\r\n    //     this.state={lat: null, errorMessage: ''}; //Since we don't know the lattitude yet, hence, default to null.\r\n\r\n    //     /*//This function requires two function callbacks to determine the current location.\r\n    //     window.navigator.geolocation.getCurrentPosition(\r\n    //         (position) => {\r\n    //             this.setState({ lat: position.coords.latitude }); //update the state using setState!!!!\r\n    //             //DO NOT - this.state.lat : position.coords.latitude ! WRONG!!!\r\n    //         }, //success callback\r\n    //         (err) => {\r\n    //             this.setState({errorMessage:err.message });\r\n    //         } //faliure callback\r\n    //     );*/\r\n    // }\r\n\r\n    //Another way to initialize state apart from constructor initialization\r\n    state = {lat: null, errorMessage: ''};\r\n\r\n    componentDidMount(){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => this.setState({ lat: position.coords.latitude }), \r\n            (err) => this.setState({errorMessage:err.message })\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log('My component was just updated - it rerendered!');\r\n    }\r\n    \r\n    \r\n    //React says we have to define render()!!\r\n    render() {\r\n        /* Since render() is called very frequently, we shifted this inside constructor()\r\n        //This function requires two function callbacks to determine the current location.\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => console.log(position), //success callback\r\n            (err) => console.log(err) //faliure callback\r\n        );*/\r\n        \r\n        if(this.state.errorMessage && !this.state.lat){\r\n            return <div>Error : {this.state.errorMessage}</div>;\r\n        }\r\n\r\n        if(!this.state.errorMessage && this.state.lat){\r\n            return <SeasonDisplay lat={this.state.lat} />;\r\n        }\r\n\r\n        return <Spinner message = \"Please accept location request\"/>;\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}